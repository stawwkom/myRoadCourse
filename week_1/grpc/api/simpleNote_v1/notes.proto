syntax = "proto3";

package simpleNote_v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

option go_package = "template_course/week_1/grpc/pkg/simpleNote_v1;simpleNote_v1";

// Определяем наш gRPC сервис и указываем необходимые методы
service simpleNote_v1 {
  rpc Create(CreateRequest) returns (CreateResponse);
  rpc Get(GetRequest) returns (GetResponse);
  rpc List(ListRequest) returns (ListResponse);
  rpc Update(UpdateRequest) returns (google.protobuf.Empty);
  rpc Delete(DeleteRequest) returns (google.protobuf.Empty);
}

// Определяем структуру NoteInfo для хранения основной информации о заметке
message NoteInfo {
  string title = 1;
  string content = 2;
  string author = 3;
  bool is_public = 4;
}

// Определение структуры Note, которая включает в себя структуру NoteInfo, id, и время создания и обновления
message Note {
  int64 id = 1;
  NoteInfo info = 2;
  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp updated_at = 4;
}

message UpdateNoteInfo {
  google.protobuf.StringValue title = 1;
  google.protobuf.StringValue content = 2;
  google.protobuf.StringValue author = 3;
  google.protobuf.BoolValue is_public = 4;
}

message CreateRequest {
  NoteInfo info = 1;
}

message CreateResponse {
  int64 id = 1;
}

message GetRequest {
  int64 id = 1;
}

message GetResponse {
  Note note = 1;
}

message ListRequest {
 int64 limit = 1;
 int64 offset = 2;
}

message ListResponse {
  repeated Note notes = 1; // repeated = слайс в protobuf = возвращаем слайс Note
}

message UpdateRequest {
  int64 id = 1;
  UpdateNoteInfo info = 2;
}

message DeleteRequest {
  int64 id = 1;
}
